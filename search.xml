<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[实现一个带预览的Markdown编辑器]]></title>
      <url>http://blog.caiyuyu.net/2016/05/11/2016-05-11-%5B%E6%8A%80%E6%9C%AF%E5%A4%87%E5%BF%98%5D%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%B8%A6%E9%A2%84%E8%A7%88%E7%9A%84Markdown%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>在一个小项目需要实现到这个，虽然不是很难，但是没接触过相关知识的可能一头雾水，索性讲下，主要库的运用。</p>
<a id="more"></a>
<h2 id="什么是markdown"><a href="#什么是markdown" class="headerlink" title="什么是markdown"></a>什么是markdown</h2><p>好吧，大家可能都懂，我一笔带过，一种轻量级标记语言，使用特定格式的语法对文本进行处理从而产生特定格式，本文就是一个例子，好处是精于内容疏于排版，over！</p>
<h2 id="需要导入的库"><a href="#需要导入的库" class="headerlink" title="需要导入的库"></a>需要导入的库</h2><h3 id="ace-builds"><a href="#ace-builds" class="headerlink" title="ace-builds"></a><a href="https://github.com/ajaxorg/ace-builds" target="_blank" rel="external">ace-builds</a></h3><p>这个是功能核心，有了这个你就可以将<code>textarea</code>转换成一个带格式的语法编辑器，类似的库有<code>CodeMirror</code>，这里不讨论。</p>
<h3 id="marked"><a href="#marked" class="headerlink" title="marked"></a><a href="https://github.com/chjj/marked" target="_blank" rel="external">marked</a></h3><p>实现markdown的预览功能，但是不知道为什么，对于表格的格式和图片大小的处理有点问题，不过没事，写个css对总体样式稍微修饰下，美观不少，(注：这个是我在前人基础上改进的)。</p>
<h3 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a><a href="https://highlightjs.org/" target="_blank" rel="external">highlight</a></h3><p>用marked解析的代码块是不包含语法高亮的，用这个实现，可以选择样式，我这里用的是<code>rainbow</code>。</p>
<h3 id="bootstrap-markdown-editor"><a href="#bootstrap-markdown-editor" class="headerlink" title="bootstrap-markdown-editor"></a><a href="https://github.com/inacho/bootstrap-markdown-editor" target="_blank" rel="external">bootstrap-markdown-editor</a></h3><p>这个是界面框架，内置兼容<code>ace-builds</code>和<code>marked</code>，基于<code>bootstrap</code>。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap/css/bootstrap.min.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap/css/bootstrap-theme.min.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap-markdown-editor.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/rainbow.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/css.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"editor"</span>&gt;</span>###title<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bootstrap/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/bootstrap-markdown-editor.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/ace-builds/src-noconflict/ace.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/marked.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/highlight.pack.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span><br><span class="line">    jQuery(document).ready(function($) &#123;</span><br><span class="line">        $('#editor').markdownEditor(&#123;</span><br><span class="line">            preview: true,</span><br><span class="line">            onPreview: function (content, callback) &#123;</span><br><span class="line">                callback( marked(content) );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>:在<code>marked.min.js</code>中配置高亮</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">marked.defaults = &#123;</span><br><span class="line">    gfm: <span class="literal">true</span>,</span><br><span class="line">    tables: <span class="literal">true</span>,</span><br><span class="line">    breaks: <span class="literal">false</span>,</span><br><span class="line">    pedantic: <span class="literal">false</span>,</span><br><span class="line">    sanitize: <span class="literal">false</span>,</span><br><span class="line">    smartLists: <span class="literal">false</span>,</span><br><span class="line">    silent: <span class="literal">false</span>,</span><br><span class="line">    highlight: <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hljs.highlightAuto(code).value;</span><br><span class="line">    &#125;,</span><br><span class="line">    langPrefix: <span class="string">"lang-"</span>,</span><br><span class="line">    smartypants: <span class="literal">false</span>,</span><br><span class="line">    headerPrefix: <span class="string">""</span>,</span><br><span class="line">    renderer: <span class="keyword">new</span> Renderer,</span><br><span class="line">    xhtml: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><iframe style="width:100%; height:445px;" name="iFrame1" scrolling="no" src="http://yinyizhixian.github.io/bootstrap-markdown-demo/" frameborder="0"></iframe>

<p><strong>源码</strong>：<a href="https://github.com/yinyizhixian/bootstrap-markdown-demo" target="_blank" rel="external">这里</a> 屠龙宝刀，点击就送。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/inacho/bootstrap-markdown-editor" target="_blank" rel="external">官方github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[乡村教师]]></title>
      <url>http://blog.caiyuyu.net/2016/05/03/2016-05-03-%5B%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%94%5D%E4%B9%A1%E6%9D%91%E6%95%99%E5%B8%88/</url>
      <content type="html"><![CDATA[<p>刘大的短篇，从来不知道在科幻的背景下“教师”一词可以表现得如此震撼人心。</p>
<p>怎么说呢？如果不是在科幻的大背景下，那这篇小说讲述的就是普普通通的、以赞颂教师蜡炬成灰精神的故事，但在这里，科幻的恢弘和细腻的人文相得益彰，从更高的位置、更高的文明层次来解读“教师”，你会被震撼到，我们从来没有意识到，我们的生命与文明竟如此的不可思议。</p>
<a id="more"></a>
<p>在地球一个偏远的小山村，故事拉开序幕，没有知识、没有文化带来精神的愚昧和意志的麻木，人理散失几近凭本能行事，眼光狭隘得看不见未来，只为单纯活下去却活得不像人，这样是很可怕的；而身为教师的李老师想的是尽最大的努力教育孩子，争取为这个小山村带来一点点的光明，孩子希望是有的，但是更可能的是，一直窝在山疙瘩里出不去，在周围人无时不刻的影响下泯灭了心中最后一缕烛光，是这样的，但是也不能不去做，总要有人去做的，不是你就是我，种子已经播下，埋在土里静静积蓄着力量，等着来年或者不知道多少年后的雨水的浇灌，总有破土而出的机会的；我想，李老师应该是这么想的，也这么做了，无愧于教师的身份。</p>
<p>终究，李老师离开了人世，而此时碳基文明与硅基文明持续两万年的星际交战进入尾声，联邦将建立一条五百光年宽的隔离带，摧毁隔离带中大部分恒星，不幸的是，银河系恰在此列，出于对生命的尊重，只能进行文明级别的甄别，放弃3C文明以下的区域，在奇点炸弹来临之际，小山村的18个孩子用牛三向宇宙证明了一个奇迹：</p>
<blockquote>
<p>一种以每秒1至10比特速率进行声波交流的物种<br>在没有任何外部高级文明培植的情况下创造了5B文明<br>有一种名为“教师”的个体，有一定数量，分布于种群的各个角落<br>在没有记忆遗传的基础上，在每代之间积累和传递知识，充当文明传承的媒介</p>
</blockquote>
<p>确实很伟大，这种伟大不仅是停留在一个民族一个星球，而是上升到宇宙文明的高度，来源于星际深处，他们肩负无可睥睨的使命，怀揣希望和梦想，奏响一曲来自太古时代的歌谣。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[由极限定义证明收敛值]]></title>
      <url>http://blog.caiyuyu.net/2016/05/01/2016-05-01-%5B%E8%80%83%E7%A0%94%E5%BD%92%E7%BA%B3%5D%E7%94%B1%E6%9E%81%E9%99%90%E5%AE%9A%E4%B9%89%E8%AF%81%E6%98%8E%E6%94%B6%E6%95%9B%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>有点虚，这个知识点确实比较偏，也不好做，只在课本见过，没办法，记下背下。<br><a id="more"></a></p>
<h3 id="数列定义的极限证明"><a href="#数列定义的极限证明" class="headerlink" title="数列定义的极限证明"></a>数列定义的极限证明</h3><p>根据数列极限的定义证明 $\lim_{n \to \infty}{3n+1 \over 2n+1}={3 \over 2}$</p>
<p><em>证明</em>：  </p>
<blockquote>
<p>$$|X_ n-a|=|{3n+1 \over 2n+1}-{3 \over 2}|={1 \over 2(2n+1)}&lt;{1 \over 4n} $$<br>$$要使|{3n+1 \over 2n+1}-{3 \over 2}|&lt;  \varepsilon，  只要{1 \over 4n}&lt;  \varepsilon$$<br>$$即n&gt;{1 \over 4  \varepsilon}，所以 \forall \varepsilon &gt;0，取N=[{1 \over 4 \varepsilon}]$$<br>$$当n&gt;N 时$$<br>$$就有|{3n+1 \over 2n+1}-{3 \over 2}|&lt; \varepsilon，即 \lim_{n \to \infty}{3n+1 \over 2n+1}={3 \over 2}$$</p>
</blockquote>
<hr>
<h3 id="函数定义的极限证明"><a href="#函数定义的极限证明" class="headerlink" title="函数定义的极限证明"></a>函数定义的极限证明</h3><p>根据函数极限的定义证明 $\lim_{x \to 1}{2x-1}=1$</p>
<p><em>证明</em></p>
<blockquote>
<p>$$|f(x)-A|=|(2x-1)-1|=2|x-1|$$<br>$$要使|f(x)-A|&lt;\varepsilon，即\forall \varepsilon &gt;0，取 \delta={\varepsilon \over 2}$$<br>$$当0&lt;|x-1|&lt; \delta 时$$<br>$$使得|(2x-1)-1|&lt;\varepsilon，即\lim_{x \to 1}{2x-1}=1$$</p>
</blockquote>
<h3 id="详细讲解与分析"><a href="#详细讲解与分析" class="headerlink" title="详细讲解与分析"></a>详细讲解与分析</h3><p>给出一道例题，根据函数极限的定义证明 $\lim_{x \to 1}{x^2-1 \over x-1}=2$</p>
<p><em>证明配讲解</em></p>
<p>首先，看到这种题，直接先抄一遍，如果是数列写$|X_n-a|$，函数写$|f(x)-A|$，</p>
<blockquote>
<p>$$|f(x)-A|=|{x^2-1 \over x-1}-2|=|x-1|$$  </p>
</blockquote>
<p>这里把公式化简一下，如果最后的公式比较复杂，出现平方、多个自变量或者常数项的情况，如上面第一题的${1 \over 2(2n+1)}$，就考虑把${1 \over 4n+2}$放缩成${1 \over 4n}$；</p>
<p>不放的话上面$N$就变成$N=[{1 \over 4\varepsilon}-{1 \over 2}]$，不好看嘛，不放缩也是可以的，而且这种定义证明题对于放缩的程度好像也没什么要求，不要太离谱了就行；</p>
<p>然后回来这道，这道不放缩，上面得出结果是$|x-1|$，在后面补上$&lt; \varepsilon$，因为这里要确定是 $\varepsilon$的范围，有$0&lt;|x-1|&lt; \varepsilon$，所以直接确定范围，$\varepsilon&gt;0$；</p>
<p>然后再得出一个中间变量 $\delta$(数列是N)，那$\delta$的值怎么确定呢？上面已经得出一个表达式，$|x-1|&lt; \varepsilon$，不等号前面已经不可再化，所有直接 $\delta=\varepsilon$，如果是$2|x-1|&lt;\varepsilon$，就需要取$\delta={\varepsilon \over 2}$，得到$|x-1|&lt; \delta$。</p>
<blockquote>
<p>$$|f(x)-A|=|{x^2-1 \over x-1}-2|=|x-1|$$<br>$$要使|f(x)-A|&lt; \varepsilon，即\forall \varepsilon &gt;0，取 \delta= \varepsilon$$<br>$$当0&lt;|x-1|&lt; \delta 时$$<br>$$使得|({x^2-1 \over x-1}-2)|&lt; \varepsilon，即\lim_{x \to 1}{x^2-1 \over x-1}=2$$  </p>
</blockquote>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p><strong>2016/05/01</strong>：首发。<br><strong>2016/05/12</strong>：回过头看了下，有些讲的不是很清楚，重新组织下。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[火影—15年完结纪念致我的雏田大小姐]]></title>
      <url>http://blog.caiyuyu.net/2016/04/27/2016-04-27-%5B%E4%BA%8C%E6%AC%A1%E5%85%83%E5%90%91%5D%E7%81%AB%E5%BD%B1%E2%80%9415%E5%B9%B4%E5%AE%8C%E7%BB%93%E7%BA%AA%E5%BF%B5%E8%87%B4%E6%88%91%E7%9A%84%E9%9B%8F%E7%94%B0%E5%A4%A7%E5%B0%8F%E5%A7%90/</url>
      <content type="html"><![CDATA[<p><img src="/img/pics/2016-04-27/3.png" alt=""></p>
<p>我们在听故事的时候，一直喜欢问：后来呢后来呢？但是并不是每个故事都会有结果，所幸，我们等到了，火影历经15年，终于完结了，更加喜闻乐见的、我们一直等着的，我们的雏田大小姐终于修成正果，如愿以偿了，意料之外也意料之中。  </p>
<a id="more"></a>
<p>所以呢？我还记得当时刚刚看火影时的震撼，在看的过程中也确实带给我很多收获和享受，但是时至今日，火影对我来说，更多的是一种情怀的味道，是对小学中学的一个回味，而雏田是我最喜欢一个人，我之所以称之为“人”而非“人物”，是因为我不愿意单单将其停留在火影这个世界里面。</p>
<p>雏田很可爱很可爱很可爱，重要的事情说三遍，雏田是个很柔弱、很容易害羞的小女生，动不动就脸红，手足无措的戳手指，然而她并不只是个花瓶，她是典型的外柔内刚，也有坚强的一面，执拗起来也会让你很头疼，哈，如果有这样的女生陪着会很轻松、很舒服。</p>
<p>可惜，幸福的路上总是曲折的，雏田遇上了不解风情的鸣人，只能望着鸣人的背影，一直追逐着，也变得越来越坚强，但不够，雏田有了自己的想法，不满足于跟在喜欢的人的身后，她想与之肩并肩，很好，她成功了。</p>
<p>鸣人是幸运的，因为有雏田一直等着他，雏田也是幸运的，因为她终于等来了鸣人的后知后觉；如果要用一句话来形容这段感情，那么我只能说：</p>
<blockquote>
<p>终于等到你，还好我没放弃。</p>
</blockquote>
<p><img src="/img/pics/2016-04-27/1.jpg" alt=""></p>
<embed src="http://music.163.com/style/swf/widget.swf?sid=27836179&type=2&auto=1&width=278&height=32" width="298" height="52" allownetworking="all">



]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单射、满射和双射]]></title>
      <url>http://blog.caiyuyu.net/2016/04/23/2016-04-23-%5B%E8%80%83%E7%A0%94%E5%BD%92%E7%BA%B3%5D%E5%8D%95%E5%B0%84%E3%80%81%E6%BB%A1%E5%B0%84%E5%92%8C%E5%8F%8C%E5%B0%84/</url>
      <content type="html"><![CDATA[<p>搞混了几次，稍作记录下。<br><a id="more"></a></p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>设$X、Y$是两个非空集合，如果存在一个法则$f$，使得对$X$中每个元素$x$，按法则$f$，在$Y$中有唯一确定的元素$y$与之对应，则称$f$为从$X$到$Y$的映射，记作: $f:X \to Y$</p>
<p>简单来说，有一点是需要注意的，就是$X$集合里面的原像一定要跟$Y$集合里面的像有关系对应，而$Y$中可以有“多余”的元素，即没有对应关系的。</p>
<hr>
<h3 id="映射的四种情况"><a href="#映射的四种情况" class="headerlink" title="映射的四种情况"></a>映射的四种情况</h3><p>基础概念清楚了，看下图就差不多了。  </p>
<p>既单射且满射(双射)<br><img src="/img/pics/2016-04-23/1.svg.png" alt=""><br>单射非满射<br><img src="/img/pics/2016-04-23/2.svg.png" alt=""><br>满射非单射<br><img src="/img/pics/2016-04-23/3.svg.png" alt=""><br>非单射非满射<br><img src="/img/pics/2016-04-23/4.svg.png" alt=""></p>
<hr>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5" target="_blank" rel="external">维基百科</a>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax实现bootstrap-paginator的分页]]></title>
      <url>http://blog.caiyuyu.net/2016/04/22/2016-04-22-%5B%E6%8A%80%E6%9C%AF%E5%A4%87%E5%BF%98%5DAjax%E5%AE%9E%E7%8E%B0bootstrap-paginator%E7%9A%84%E5%88%86%E9%A1%B5/</url>
      <content type="html"><![CDATA[<p>网站开发实现分页是不可避免的，找到个bootstrap-paginator，最主要是挺漂亮的有木有？<br><a id="more"></a></p>
<h3 id="什么是分页？"><a href="#什么是分页？" class="headerlink" title="什么是分页？"></a>什么是分页？</h3><p>这个就不废话了，分页分客户端分页和服务端分页，对于数据量比较大的情况，无疑是服务端分页优选，更快更便捷，本文讲的就是服务端分页，当然也可以做成客户端的效果，看你怎么实现。</p>
<hr>
<h3 id="Paginator-是什么？"><a href="#Paginator-是什么？" class="headerlink" title="Paginator 是什么？"></a>Paginator 是什么？</h3><p>Bootstrap Paginator 一款基于Bootstrap的js分页插件，至于什么是bootstrap是什么就不用说了，前端框架，用起来很方便，漂亮简洁，不用费心去找模板了。</p>
<hr>
<h3 id="如何使用Paginator？"><a href="#如何使用Paginator？" class="headerlink" title="如何使用Paginator？"></a>如何使用Paginator？</h3><p><strong>声明</strong>：我这里的代码是参照我的项目的，我直接复制过来，有些不是必要的，各位自行斟酌。</p>
<h4 id="导入库文件"><a href="#导入库文件" class="headerlink" title="导入库文件"></a>导入库文件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery-2.1.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bootstrap-paginator.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="前端界面的html代码"><a href="#前端界面的html代码" class="headerlink" title="前端界面的html代码"></a>前端界面的html代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"list-group"</span> <span class="attr">style</span>=<span class="string">"height: 430px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 500px; text-align: center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"pageLimit"</span> <span class="attr">style</span>=<span class="string">"position: absolute; bottom: 0px; margin-left: auto; margin-right: auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个是个div，我想在这里放置一个列表，这里要说明下，<code>id=&quot;post&quot;</code>这个<code>ul</code>放的是列表，<code>id=&quot;pageLimit&quot;</code>这个<code>ul</code>放的是分页显示的按钮，不要搞混了。</p>
<h4 id="Ajax和jquery代码"><a href="#Ajax和jquery代码" class="headerlink" title="Ajax和jquery代码"></a>Ajax和jquery代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bootstrap_paging</span>(<span class="params">page</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> listNum = <span class="number">2</span>;<span class="comment">//每页多少条数据</span></span><br><span class="line">       $.ajax(&#123;</span><br><span class="line">           type: <span class="string">"GET"</span>,</span><br><span class="line">           url:<span class="string">"/PostGetData"</span>,</span><br><span class="line">           dataType:<span class="string">"json"</span>,</span><br><span class="line">           data: <span class="string">"pageId="</span>+page+<span class="string">"&amp;listNum="</span>+listNum,</span><br><span class="line">           success:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">var</span> element = $(<span class="string">'#post'</span>);</span><br><span class="line">               <span class="keyword">var</span> pages = <span class="built_in">Math</span>.ceil(msg.num/listNum)</span><br><span class="line">               $(<span class="string">'.postList'</span>).remove();</span><br><span class="line">               $.each(msg.post,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line">                   element.append(<span class="string">'&lt;li class="list-group-item postList" onclick="getContent(this)"&gt;'</span>+item.title+<span class="string">'&lt;span style="float: right;"&gt;'</span>+item.time);</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="keyword">var</span> options = &#123;</span><br><span class="line">                   currentPage: page,</span><br><span class="line">                   totalPages: pages,</span><br><span class="line">                   useBootstrapTooltip: <span class="literal">true</span>,</span><br><span class="line">                   bootstrapMajorVersion: <span class="number">3</span>,</span><br><span class="line">                   tooltipTitles: <span class="function"><span class="keyword">function</span> (<span class="params">type, page, current</span>) </span>&#123;</span><br><span class="line">                       <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                           <span class="keyword">case</span> <span class="string">"first"</span>:</span><br><span class="line">                               <span class="keyword">return</span> <span class="string">"Go To First Page &lt;i class='icon-fast-backward icon-white'&gt;&lt;/i&gt;"</span>;</span><br><span class="line">                           <span class="keyword">case</span> <span class="string">"prev"</span>:</span><br><span class="line">                               <span class="keyword">return</span> <span class="string">"Go To Previous Page &lt;i class='icon-backward icon-white'&gt;&lt;/i&gt;"</span>;</span><br><span class="line">                           <span class="keyword">case</span> <span class="string">"next"</span>:</span><br><span class="line">                               <span class="keyword">return</span> <span class="string">"Go To Next Page &lt;i class='icon-forward icon-white'&gt;&lt;/i&gt;"</span>;</span><br><span class="line">                           <span class="keyword">case</span> <span class="string">"last"</span>:</span><br><span class="line">                               <span class="keyword">return</span> <span class="string">"Go To Last Page &lt;i class='icon-fast-forward icon-white'&gt;&lt;/i&gt;"</span>;</span><br><span class="line">                           <span class="keyword">case</span> <span class="string">"page"</span>:</span><br><span class="line">                               <span class="keyword">return</span> <span class="string">"Go to page "</span> + page + <span class="string">" &lt;i class='icon-file icon-white'&gt;&lt;/i&gt;"</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;,</span><br><span class="line">                   bootstrapTooltipOptions: &#123;</span><br><span class="line">                       html: <span class="literal">true</span>,</span><br><span class="line">                       placement: <span class="string">'bottom'</span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               $(<span class="string">'#pageLimit'</span>).bootstrapPaginator(options);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       Bootstrap_paging(<span class="number">1</span>);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>
<p>这里其实就是一个函数，传入的参数是需要跳转的页面，在第一次访问页面调用它，传入参数1，这样就显示了第一页的数据。<br><code>url</code>是后台的请求数据的页面，因为我们实现的是服务端分页，所以是一页一页的获取数据，需要传给后台的有俩个参数，<br>一个是<code>pageId</code>，即当前的页面，一个是<code>listNum</code>，是每页最多显示多少条数据。</p>
<h4 id="修改bootstrap-paginator-js文件的代码"><a href="#修改bootstrap-paginator-js文件的代码" class="headerlink" title="修改bootstrap-paginator.js文件的代码"></a>修改bootstrap-paginator.js文件的代码</h4><p>这个我觉得不是太好，因为bootstrap-paginator.js文件是一个库，一般我们尽量不要去改的，如果有需要修改的会提供一个接口给我们，但是我找了一下没有找到，所以只能直接在这里改了，<br>如果有大牛路过知道怎么回事的希望不吝赐教。在该文件223行左右的地方加入刚才上面我们定义的函数。  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">onPageClicked: <span class="function"><span class="keyword">function</span> (<span class="params">event, originalEvent, type, page</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//show the corresponding page and retrieve the newly built item related to the page clicked before for the event return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> currentTarget = $(event.currentTarget);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"first"</span>:</span><br><span class="line">        currentTarget.bootstrapPaginator(<span class="string">"showFirst"</span>);</span><br><span class="line">        Bootstrap_paging(page);<span class="comment">//add</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"prev"</span>:</span><br><span class="line">        currentTarget.bootstrapPaginator(<span class="string">"showPrevious"</span>);</span><br><span class="line">        Bootstrap_paging(page);<span class="comment">//add</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"next"</span>:</span><br><span class="line">        currentTarget.bootstrapPaginator(<span class="string">"showNext"</span>);</span><br><span class="line">        Bootstrap_paging(page);<span class="comment">//add</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"last"</span>:</span><br><span class="line">        currentTarget.bootstrapPaginator(<span class="string">"showLast"</span>);</span><br><span class="line">        Bootstrap_paging(page);<span class="comment">//add</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"page"</span>:</span><br><span class="line">        currentTarget.bootstrapPaginator(<span class="string">"show"</span>, page);</span><br><span class="line">        Bootstrap_paging(page);<span class="comment">//add</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="后台服务器端的clojure代码"><a href="#后台服务器端的clojure代码" class="headerlink" title="后台服务器端的clojure代码"></a>后台服务器端的clojure代码</h4><p>嗯，因为我这个后台是clojure实现的，所以这部分代码是clojure的，你们可以根据自己的语言写，功能挺简单。</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> PostGetData</span><br><span class="line">  [request]</span><br><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [pageId  (<span class="name">parse-int</span> (<span class="name"><span class="builtin-name">-&gt;</span></span> request <span class="symbol">:params</span> <span class="symbol">:pageId</span>))</span><br><span class="line">        listNum (<span class="name">parse-int</span> (<span class="name"><span class="builtin-name">-&gt;</span></span> request <span class="symbol">:params</span> <span class="symbol">:listNum</span>))]</span><br><span class="line">    (<span class="name"><span class="builtin-name">def</span></span> data (<span class="name">db/all_for_post</span>))</span><br><span class="line">    (<span class="name"><span class="builtin-name">def</span></span> Newdata (<span class="name"><span class="builtin-name">hash-map</span></span> <span class="symbol">:post</span> (<span class="name"><span class="builtin-name">into</span></span> [] (<span class="name"><span class="builtin-name">nth</span></span> (<span class="name">partition-all</span> listNum data) (<span class="name"><span class="builtin-name">-</span></span> pageId <span class="number">1</span>))),</span><br><span class="line">                           <span class="symbol">:num</span> (<span class="name"><span class="builtin-name">count</span></span> data)))</span><br><span class="line">    (<span class="name">generate-string</span> Newdata)))</span><br></pre></td></tr></table></figure>
<p>如上，从数据库查询所需的全部数据，根据我们ajax异步请求传的<code>listNum</code>参数来确定切割几份，再根据<code>pageId</code>确定返回哪部分，自然，要转成json形式。<br>最后返回的数据大概是这样的。  </p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"num"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"post"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"title"</span>,</span><br><span class="line">            <span class="attr">"time"</span>: <span class="string">"Wed Apr 20 2016"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"aa"</span>,</span><br><span class="line">            <span class="attr">"time"</span>: <span class="string">"Wed Apr 20 2016"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/img/pics/2016-04-22/qq.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://my.oschina.net/xiaoxiangdaizi/blog/489047?fromerr=5pEgJ0C1" target="_blank" rel="external">alleybag的教程</a><br><a href="http://blog.csdn.net/zxw394/article/details/30067827" target="_blank" rel="external">zxw394的博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第一次亲密接触]]></title>
      <url>http://blog.caiyuyu.net/2016/02/11/2016-02-11-%5B%E9%98%85%E8%AF%BB%E9%9A%8F%E7%AC%94%5D%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BA%B2%E5%AF%86%E6%8E%A5%E8%A7%A6/</url>
      <content type="html"><![CDATA[<p><img src="/img/pics/2016-02-11/第一次亲密接触.png" alt=""></p>
<p>无论多么美好浪漫的假设都只是一个假言命题，只要前件不成立，后件就没有讨论的意义了。</p>
<a id="more"></a>
<p>正如故事起因的痞子蔡的那个plan：</p>
<blockquote>
<p>如果我有一千万，我就能买一栋房子。<br>我有一千万吗？没有。<br>所以我仍然没有房子。<br>如果我有翅膀，我就能飞。<br>我有翅膀吗？没有。<br>所以我也没办法飞。<br>如果把整个太平洋的水倒出，也浇不熄我对你爱情的火。<br>整个太平洋的水全部倒得出吗？不行。<br>所以我并不爱你。</p>
</blockquote>
<p>事实证明，这个夹杂着逻辑命题的浪漫宣言是很吸引小女生的，于是女主人公轻舞飞扬出场了，在网络上与痞子蔡来了一次美丽的邂逅。<br>轻舞飞扬活于自己世界，陶醉于自己的世界，很浪漫，很美：</p>
<blockquote>
<p>我轻轻地舞着，在拥挤的人群之中。<br>你投射过来异样的眼神。<br>诧异也好，欣赏也罢。<br>并不曾使我的舞步凌乱。<br>因为令我飞扬的，不是你注视的目光。<br>而是我年轻的心。</p>
</blockquote>
<p>在三点一刻的相伴中虽然见不到彼此，却依然可以很温馨的感受到双方内心，他们将情感藏于字里行间，一字一语都洋溢着默契与深情。</p>
<p>当装痞子的痞子蔡和长发飞扬的轻舞飞扬在现实中的第一次相见，并没有影响到这段恋情，而是将之推上高峰，不出意外，彼此双方确实是自己命中注定的那个人。</p>
<p>只可惜，美好的东西总是不长久的，随后，在电影院看电影、在麦当劳吃快餐乃至最后在跨年晚会洒香水雨，都可以分外感受到轻舞飞扬那颗捏得越来越紧的心。</p>
<p>在医院中的再次重逢却不是应有的死气沉沉或是悲伤，轻舞飞扬还是那个轻舞飞扬，带着浅浅的笑容，像什么都没发生一般与痞子蔡说着话，直到最后。</p>
<p>生活总得继续，活着的人只能越发珍惜现在和怀念过往，轻舞飞扬虽然走了，却还是活着痞子蔡的心中，每晚三点一刻准时上线陪伴着轻舞飞扬，</p>
<p>于此同时，留下的还有那个被轻舞飞扬改过的plan：</p>
<blockquote>
<p>如果我还有一天寿命，那天我要做你女友。<br>我还有一天的命吗？没有。<br>所以，很可惜。我今生仍然不是你的女友。<br>如果我有翅膀，我要从天堂飞下来看你。<br>我有翅膀吗？没有。<br>所以，很遗憾。我从此无法再看到你。<br>如果把整个浴缸的水倒出，也浇不熄我对你爱情的火。<br>整个浴缸的水全部倒得出吗？可以。<br>所以，是的。我爱你</p>
</blockquote>
<p>故事结束了，但是我却不是很伤感，只是有点可惜，其实这样的感情很美好不是吗？没有遗憾。够了够了，斯人已逝，活着的人却还会记着她，永远永远!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中传值和传引用]]></title>
      <url>http://blog.caiyuyu.net/2016/02/05/2016-02-05-%5B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%5DJava%E4%B8%AD%E4%BC%A0%E5%80%BC%E5%92%8C%E4%BC%A0%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>老虎老鼠，傻傻分不清楚。<br><a id="more"></a><br>传值和传引用的概念在C++的时候确实是个问题，什么指针什么引用搞得很头疼；<br>Java还好，没有指针了。<br>Java的数据类型如下，先看下。<br><img src="/img/pics/2016-02-05/2011100711181651.jpg" alt="down">  </p>
<h3 id="基础数据类型是传值"><a href="#基础数据类型是传值" class="headerlink" title="基础数据类型是传值"></a>基础数据类型是传值</h3><p>这个没什么可说的，看例子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"in Test function: a = "</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"before Test function: a = "</span>+a);</span><br><span class="line">        test(a);</span><br><span class="line">        System.out.println(<span class="string">"after Test function: a = "</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//before Test function: a = 1</span></span><br><span class="line"><span class="comment">//in Test function: a = 2</span></span><br><span class="line"><span class="comment">//after Test function: a = 1</span></span><br></pre></td></tr></table></figure></p>
<p>如果是基础数据类型，你就放心的把值交给函数了，肯定不会改变原值的。</p>
<h3 id="引用数据类型是传引用"><a href="#引用数据类型是传引用" class="headerlink" title="引用数据类型是传引用"></a>引用数据类型是传引用</h3><p>一般大家会觉得，有俩种情况嘛，<em>传值不改变原值，传引用会改变</em>，唔，这句话不完全正确，<br>应该说 <em>传值一定不改变原值，传引用可能会改变</em>，先看一下会改变的情况。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        str.append(<span class="string">" world"</span>);</span><br><span class="line">        System.out.println(<span class="string">"in Test2 function: str = "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer  str = <span class="keyword">new</span> StringBuffer(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"before Test2 function: str = "</span>+str);</span><br><span class="line">        test(str);</span><br><span class="line">        System.out.println(<span class="string">"after Test2 function: str = "</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//before Test2 function: str = hello</span></span><br><span class="line"><span class="comment">//in Test2 function: str = hello world</span></span><br><span class="line"><span class="comment">//after Test2 function: str = hello world</span></span><br></pre></td></tr></table></figure></p>
<p>接着看下不变的情况。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        str = <span class="keyword">new</span> StringBuffer(<span class="string">"world"</span>);</span><br><span class="line">        System.out.println(<span class="string">"in Test2 function: str = "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer  str = <span class="keyword">new</span> StringBuffer(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"before Test2 function: str = "</span>+str);</span><br><span class="line">        test(str);</span><br><span class="line">        System.out.println(<span class="string">"after Test2 function: str = "</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//before Test2 function: str = hello</span></span><br><span class="line"><span class="comment">//in Test2 function: str = world</span></span><br><span class="line"><span class="comment">//after Test2 function: str = hello</span></span><br></pre></td></tr></table></figure></p>
<p>怎么样，如果你可以理解这俩种情况的区别，那就证明你对java中引用的概念理解得不错；<br>简单解释下，我们一直在说透过现象看本质，所谓引用，就是要你看准最本质的东西，也就是最底层的不变的值。<br>在main函数中，str引用一个对象，这个对象是有实例化的，存在于内存中的；<br>调用test函数时，传入引用，内存不会有任何变化，对象还是那个对象，test函数中的str其实不一定是str，你可以是string或者是s都可以，但是这个符号所指向的内存地址是和main函数中的str是一样的，这就是引用。<br>第一个例子中，在test函数中调用了append方法，操作的就是我们内存中由main函数实例化的那个对象，所以调用test函数值会变化。<br>第二个例子中，实际上是什么呢，是再实例化一个新的对象，然后让原先引用旧对象的str重新指向新的对象，既然没有对原先对象做任何操作，调用test函数后值自然不会变化。  </p>
<p>其实到了这里你基本上不用往下看，就是这个理，一通百通，不过还是有些人对以下情况会疑惑，  </p>
<p>java的string类型有点特别，字符串池什么的我就不说了，结论就是string类型的值不可变，<br>虽然是传引用，但是它传引用和传值没什么区别，它不像StringBuffer有个append方法，<br>把一个string引用给你，你最多也只能重新引用一个新的字符串，不能改变原先的，上例子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        str = <span class="string">"hello world"</span>;</span><br><span class="line">        System.out.println(<span class="string">"in Test3 function: str = "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String  str = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(<span class="string">"before Test3 function: str = "</span>+str);</span><br><span class="line">        test(str);</span><br><span class="line">        System.out.println(<span class="string">"after Test3 function: str = "</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>与string类似，java的基础数据类型的包装类的数据也是不可变的，<br>类中没有提供方法调用，而且属性用final写死了，你想变也没辙。  </p>
<table>
<thead>
<tr>
<th><em>基本数据类型</em></th>
<th><em>包装类</em></th>
</tr>
</thead>
<tbody>
<tr>
<td> byte</td>
<td>Byte</td>
</tr>
<tr>
<td> boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td> short</td>
<td>Short</td>
</tr>
<tr>
<td> char</td>
<td>Character </td>
</tr>
<tr>
<td> int</td>
<td>Integer</td>
</tr>
<tr>
<td> long</td>
<td>Long</td>
</tr>
<tr>
<td> float</td>
<td>Float</td>
</tr>
<tr>
<td> double</td>
<td>Double</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Clojure 学习日记 — 3进阶语法]]></title>
      <url>http://blog.caiyuyu.net/2016/01/30/2016-01-30-%5B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5DClojure%20%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%20%E2%80%94%203%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>嗯，其实也是比较基础的语法，但是跟平时的语言不太一样，所以称之为进阶。<br><a id="more"></a></p>
<h3 id="Clojure的特殊形式"><a href="#Clojure的特殊形式" class="headerlink" title="Clojure的特殊形式"></a>Clojure的特殊形式</h3><p>单纯的字面量是不可能成为一门语言的，伴随而来的还有一些特别的东西，类似控制语句、函数等。<br>clojure当然也有这些东西，我们称之为特殊形式，clojure的简洁高效灵活的一部分原因也归结于此。</p>
<h4 id="阻止求值-quote"><a href="#阻止求值-quote" class="headerlink" title="阻止求值:quote"></a>阻止求值:quote</h4><p>类似lisp的函数式语言突出的特点就是那一堆密密麻麻的小括号，clojure会将括号解析成一个形式，但是集合字面量中<code>list</code>类型是用小括号包起来的，自然不是一个形式，于是要在<code>(</code>前加个阻止求值符号<code>‘</code>，作用就是告诉repl这是个列表，阻止求值，类似的，也可以阻止对var求职上例子。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(+ 1 1)</span><br><span class="line">;=2</span><br><span class="line">`(+ 1 1)</span><br><span class="line">;=(+ 1 1）</span><br><span class="line">(def x [1])</span><br><span class="line">;=#'user/x</span><br><span class="line">x</span><br><span class="line">;=[1]</span><br><span class="line">'x</span><br><span class="line">;=x</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="代码块-do"><a href="#代码块-do" class="headerlink" title="代码块:do"></a>代码块:do</h4><p>do会依次求值你传进来的所有表达式，并将最后一个表达式的结果作为do的返回值，其他表达式的结果就丢弃掉<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">do</span></span> </span><br><span class="line">    (<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span><br><span class="line">    (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> <span class="number">4</span>)</span><br><span class="line">    (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> <span class="number">6</span>))</span><br><span class="line"><span class="comment">;=30</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="定义var-def"><a href="#定义var-def" class="headerlink" title="定义var:def"></a>定义var:def</h4><p>可以暂时这么理解吧，<code>def</code>是对一个变量的声明，类似我们学过的<code>int</code>或是<code>double</code>但是<code>def</code>可以声明任何类型，甚至一个函数，一个形式，而且，有<code>def</code>定义的var并不是变量，这点要切记，不要理解错误，在后续的学习会有进一步的解释。</p>
<hr>
<h4 id="本地绑定-let"><a href="#本地绑定-let" class="headerlink" title="本地绑定:let"></a>本地绑定:let</h4><p><code>let</code>结构跟前面说过的<code>do</code>结构有点类似，而实际上，在<code>let</code>里面隐式的调用了<code>do</code>函数，可能在clojure源码那里可以看到，所以跟<code>do</code>有点相像，比如:<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [x <span class="number">1</span>]</span><br><span class="line">    (<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span><br><span class="line">    (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> <span class="number">4</span>)</span><br><span class="line">    (<span class="name"><span class="builtin-name">*</span></span> <span class="number">5</span> <span class="number">6</span>))</span><br><span class="line"><span class="comment">;=30</span></span><br></pre></td></tr></table></figure></p>
<p>也是在形式里面包含诸多表达式，并以最后一个作为<code>let</code>返回值，有些不一样的就是紧跟<code>let</code>后面的用<code>[]</code>包起来的绑定数组，这个绑定数组里面的东西是成对出现的，可以暂时理解成赋值，后面一个对前面一个赋值，如果对后面一个值不需要保留，在前面可以用<code>_</code>代替，表示丢弃。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [x <span class="number">1</span></span><br><span class="line">      y <span class="number">2</span></span><br><span class="line">      _ <span class="number">3</span>]</span><br><span class="line">  (<span class="name"><span class="builtin-name">+</span></span> x y))</span><br><span class="line"><span class="comment">;=3</span></span><br></pre></td></tr></table></figure></p>
<p><code>let</code>的绑定数组里面这种类似赋值的操作我们称为绑定。<br>既然说到赋值，那伴随而来的肯定有取值，一般的取值可以直接使用var标识符来取得，但是对于集合类型的var取值我们成为解构，可以通过如下进行取值。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> v [<span class="number">43</span> <span class="string">"foo"</span> <span class="number">99.3</span>])</span><br><span class="line"><span class="comment">;=#'user/v</span></span><br><span class="line">(<span class="name"><span class="builtin-name">first</span></span> v)</span><br><span class="line"><span class="comment">;=43</span></span><br><span class="line">(<span class="name"><span class="builtin-name">nth</span></span> v <span class="number">2</span>)</span><br><span class="line"><span class="comment">;=99.3</span></span><br><span class="line">(<span class="name">v</span> <span class="number">2</span>)</span><br><span class="line"><span class="comment">;=99.3</span></span><br><span class="line">(<span class="name">.get</span> v <span class="number">1</span>)</span><br><span class="line"><span class="comment">;="foo"</span></span><br><span class="line">(<span class="name"><span class="builtin-name">second</span></span> v)</span><br><span class="line"><span class="comment">;="foo"</span></span><br><span class="line">(<span class="name"><span class="builtin-name">last</span></span> v)</span><br><span class="line"><span class="comment">;=99.3</span></span><br></pre></td></tr></table></figure></p>
<p>这里插入一段解构是因为这个东西跟<code>let</code>绑定有关系，解构这个特性是由<code>let</code>提供的，和<code>let</code>结合使用可以大大体现出语言的灵活性。</p>
<p><code>let</code>解构支持俩种类型的解构,<br>顺序解构是对集合里面的元素依次绑定的一个新的var中，可以嵌套，也可以使用<code>_</code>充当占位符对元素忽略，也可以用<code>&amp;</code>元素来保持解构剩下的元素，可以用<code>:as</code>来保持被解构的集合，具体看例子。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> v [<span class="number">33</span> <span class="string">"rr"</span> [<span class="number">4</span> <span class="number">5</span>]])</span><br><span class="line"><span class="comment">;='user/v</span></span><br><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [[x _ [y z]] v]</span><br><span class="line">    (<span class="name"><span class="builtin-name">+</span></span> x y z))</span><br><span class="line"><span class="comment">;=42</span></span><br><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [[x _ &amp; rest] v]</span><br><span class="line">    rest)</span><br><span class="line"><span class="comment">;=([4 5])</span></span><br><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [[x _ [y z] <span class="symbol">:as</span> a] v]</span><br><span class="line">    a)</span><br><span class="line"><span class="comment">;=[33 "rr" [4 5]]</span></span><br></pre></td></tr></table></figure></p>
<p>另外一种是map解构，不过map解构对应元素是通过key来确定的，不是通过顺序。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> m &#123;<span class="symbol">:a</span> <span class="number">5</span>, <span class="symbol">:b</span> <span class="number">6</span></span><br><span class="line">        <span class="symbol">:c</span> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">        <span class="symbol">:d</span> &#123;<span class="symbol">:e</span> <span class="number">10</span>, <span class="symbol">:f</span> <span class="number">5</span>&#125;</span><br><span class="line">        <span class="string">"foo"</span> <span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">;='user/m</span></span><br><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [&#123;f <span class="string">"foo"</span></span><br><span class="line">       a <span class="symbol">:a</span></span><br><span class="line">       b <span class="symbol">:b</span></span><br><span class="line">       &#123;e <span class="symbol">:e</span>&#125; <span class="symbol">:d</span>&#125; m]</span><br><span class="line">    (<span class="name"><span class="builtin-name">+</span></span> f a b e))</span><br><span class="line"><span class="comment">;=24</span></span><br></pre></td></tr></table></figure></p>
<p>还有一点，就是<code>:or</code>这个东东，如果要解构的key在集合中没有对应的元素那就会为之提供默认值，这个差点被绕晕了，它和<code>or</code>函数是完全不一样的，书上的例子差点误导我，应该不是我理解能力的问题，确实没有说清楚。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> m &#123;<span class="symbol">:a</span> <span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">;='user/m</span></span><br><span class="line"><span class="comment">;;下面俩个意义完全不一样</span></span><br><span class="line"><span class="comment">;;第一个，在解构的过程 :or 会检查，如果没有则进行绑定</span></span><br><span class="line"><span class="comment">;;绑定完k的值为50</span></span><br><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [&#123;k <span class="symbol">:u</span>, a <span class="symbol">:a</span>,</span><br><span class="line">        <span class="symbol">:or</span> &#123;k <span class="number">50</span>&#125;&#125; m]</span><br><span class="line">    (<span class="name"><span class="builtin-name">+</span></span> k a))</span><br><span class="line"><span class="comment">;=53</span></span><br><span class="line"><span class="comment">;;第二个，在解构的时候并没有任何操作，解构绑定完k的值为nil</span></span><br><span class="line"><span class="comment">;;之所以是这个结果，是因为下面还有一个绑定</span></span><br><span class="line"><span class="comment">;;使用了 or 函数，当前面的值为 false 或 nill 会跳到下个值，使得k为50</span></span><br><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [&#123;k <span class="symbol">:u</span>, a <span class="symbol">:a</span>&#125; m</span><br><span class="line">       k (<span class="name"><span class="builtin-name">or</span></span> k <span class="number">50</span>)]</span><br><span class="line">    (<span class="name"><span class="builtin-name">+</span></span> k a))</span><br><span class="line"><span class="comment">;=53</span></span><br></pre></td></tr></table></figure></p>
<p>还有一点，就是关键字<code>:key</code>、<code>:strs</code>、<code>:syms</code>的使用，简化代码，使代码美观，java那种臃肿的代码是clojure不能接受的。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> ch &#123;<span class="symbol">:a</span> <span class="string">"a"</span>, <span class="symbol">:b</span> <span class="string">"b"</span>, <span class="symbol">:c</span> <span class="string">"c"</span>&#125;)</span><br><span class="line"><span class="comment">;=#'user/ch</span></span><br><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [&#123;<span class="symbol">:keys</span> [a b c]&#125; ch]</span><br><span class="line">    (<span class="name"><span class="builtin-name">format</span></span> <span class="string">"%s %s %s."</span> a b c))</span><br><span class="line"><span class="comment">;map的key值如果为关键字使用 :keys</span></span><br><span class="line"><span class="comment">;map的key值如果为字符串使用 :strs</span></span><br><span class="line"><span class="comment">;map的key值如果为符号使用 :styms</span></span><br><span class="line"><span class="comment">;="a b c."</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; :keys 与 &amp; 结合使用</span></span><br><span class="line">(<span class="name"><span class="builtin-name">def</span></span> user-info [<span class="string">"robert"</span> <span class="number">2016</span> <span class="symbol">:name</span> <span class="string">"Tom"</span> <span class="symbol">:city</span> <span class="string">"Huilai"</span>])</span><br><span class="line"><span class="comment">;#'user/user-info</span></span><br><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [[username year &amp; &#123;<span class="symbol">:keys</span> [name city]&#125;] user-info]</span><br><span class="line">    (<span class="name"><span class="builtin-name">format</span></span> <span class="string">"%s is in %s"</span> name city))</span><br><span class="line"><span class="comment">;="Tom is in Huilai"</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="定义函数-fn"><a href="#定义函数-fn" class="headerlink" title="定义函数:fn"></a>定义函数:fn</h4><p>在学其他语言已经有函数的概念了，在clojure函数<code>fn</code>也隐式到包含了<code>let</code>，也有个绑定数组，功能效果与<code>let</code>类似。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">((<span class="name"><span class="builtin-name">fn</span></span> [x] (<span class="name"><span class="builtin-name">+</span></span> x <span class="number">10</span>)) <span class="number">2</span>)</span><br><span class="line"><span class="comment">;=12</span></span><br></pre></td></tr></table></figure></p>
<p>但是这样调用太麻烦，而且不能重复，所以要定义一个<code>var</code>来引用，<code>defn</code>是一个封装了<code>def</code>和<code>fn</code>功能的宏。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> FD [x] (<span class="name"><span class="builtin-name">+</span></span> x <span class="number">10</span>))</span><br><span class="line"><span class="comment">;=#'user/FD</span></span><br><span class="line">(<span class="name">FD</span> <span class="number">2</span>)</span><br><span class="line"><span class="comment">;=12</span></span><br><span class="line">(<span class="name">FD</span> <span class="number">3</span>)</span><br><span class="line"><span class="comment">;=13</span></span><br></pre></td></tr></table></figure></p>
<p>当然，函数在clojure中很重要，用好函数可以大大增强在clojure的灵活性和简洁性，主要是在传参和复用这里灵活应用。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;可变参数</span></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f1</span><br><span class="line">    ([x] (<span class="name"><span class="builtin-name">+</span></span> x <span class="number">1</span>))</span><br><span class="line">    ([x y] (<span class="name"><span class="builtin-name">+</span></span> x y))</span><br><span class="line">    ([x y z] (<span class="name"><span class="builtin-name">+</span></span> x y z)))</span><br><span class="line"><span class="comment">;=#'user/f1</span></span><br><span class="line">(<span class="name">f1</span> <span class="number">1</span>)</span><br><span class="line"><span class="comment">;=2</span></span><br><span class="line">(<span class="name">f1</span> <span class="number">1</span> <span class="number">2</span>)</span><br><span class="line"><span class="comment">;=3</span></span><br><span class="line">(<span class="name">f1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line"><span class="comment">;=6</span></span><br><span class="line"><span class="comment">;可变参数+&amp;</span></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f2 </span><br><span class="line">  [&amp; r] r)<span class="comment">;r为list</span></span><br><span class="line">(<span class="name">f2</span> <span class="number">2</span> <span class="number">4</span>)<span class="comment">;因为函数定义有 &amp; ，所以多个参数传进去是用list包起来的</span></span><br><span class="line"><span class="comment">;=(2 4)</span></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f2 </span><br><span class="line">  [&amp; [r]] r)<span class="comment">;r为vector</span></span><br><span class="line">(<span class="name">f2</span> [<span class="number">2</span> <span class="number">4</span> <span class="number">5</span>])<span class="comment">;只传进去一个vector类型参数</span></span><br><span class="line"><span class="comment">;=[2 4 5]</span></span><br><span class="line">(<span class="name">f2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span>)<span class="comment">;如果传进去多个参数</span></span><br><span class="line"><span class="comment">;=2;这个结果很奇怪</span></span><br><span class="line"><span class="comment">;我猜是这样的，函数定义接受参数的类型为vector，你如果传参是一个vector，那就通过，</span></span><br><span class="line"><span class="comment">;直接绑定，如果不是一个vector，那 (2 4 5) 是不能强转为 [2 4 5] 的，所有传的参数不会包成一个list，而是只传进去一个参数，后面的抛弃，而且传进去的参数会被强转为关键字</span></span><br><span class="line"><span class="comment">;可变参数+默认值+&amp;</span></span><br><span class="line"><span class="comment">;默认值不限于&amp;参数</span></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> f2 </span><br><span class="line">    [&amp; p] (<span class="name"><span class="builtin-name">or</span></span> p <span class="string">"p is nil"</span>))<span class="comment">;注意，如果 &amp; 前面有几个固定参数，那调用函数也是要有几个固定参数的</span></span><br><span class="line">(<span class="name">f2</span>)</span><br><span class="line"><span class="comment">;="p is nil"</span></span><br><span class="line"><span class="comment">;可变参数+解构+&amp;</span></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> m</span><br><span class="line">  [u &amp; &#123;<span class="symbol">:keys</span> [a b]&#125;]</span><br><span class="line">  &#123;<span class="symbol">:u</span> u, <span class="symbol">:a</span> a, <span class="symbol">:b</span> b&#125;)</span><br><span class="line">(<span class="name">m</span> <span class="string">"username"</span> <span class="symbol">:a</span> <span class="string">"aaa"</span> <span class="symbol">:b</span> <span class="string">"bbb"</span>)</span><br><span class="line"><span class="comment">;=&#123;:u "username", :a "aaa", :b "bbb"&#125;</span></span><br><span class="line"><span class="comment">;&amp;后面支持解构，排除掉第一个元素后剩下的元素以map形式传进去，同时剩下的元素必须成对存在，有key值和value值。</span></span><br></pre></td></tr></table></figure></p>
<p>函数字面量是使用<code>#()</code>语法来定义一个匿名函数，主要用于一些简单的函数，这种匿名函数不支持嵌套，函数体有多个表达式的时候要显式使用<code>do</code>语法。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(fn [x y]</span><br><span class="line">    (println (str x \^ y))</span><br><span class="line">    (Math/pow x y))</span><br><span class="line">#(do (println (str %1 \^ %2))</span><br><span class="line">     (Math/pow %1 %2))</span><br><span class="line">(fn [x &amp; rest]</span><br><span class="line">    (- x (apply + rest)))</span><br><span class="line">#(- % (apply + %&amp;))</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="条件判断-if"><a href="#条件判断-if" class="headerlink" title="条件判断:if"></a>条件判断:if</h4><p>这个简单，<code>if</code>把任何非<code>nil</code>或<code>false</code>的值判断为<code>true</code>，直接看例子。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">if</span></span> <span class="string">"a"</span> \t)</span><br><span class="line"><span class="comment">;=\t</span></span><br><span class="line">(<span class="name"><span class="builtin-name">if</span></span> <span class="literal">nil</span> <span class="string">"une"</span> \f)</span><br><span class="line"><span class="comment">;=\f</span></span><br><span class="line">(<span class="name"><span class="builtin-name">if</span></span> <span class="literal">false</span> \t)</span><br><span class="line"><span class="comment">;=nil</span></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> type-of-number [n]</span><br><span class="line">           (<span class="name"><span class="builtin-name">cond</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> n <span class="number">0</span>) <span class="string">"positive number"</span></span><br><span class="line">                 (<span class="name"><span class="builtin-name">&lt;</span></span> n <span class="number">0</span>) <span class="string">"negative number"</span></span><br><span class="line">                 <span class="symbol">:else</span> <span class="string">"zero"</span>))</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="循环-loop-和-recur"><a href="#循环-loop-和-recur" class="headerlink" title="循环:loop 和 recur"></a>循环:loop 和 recur</h4><p>说下<code>recur</code>，听着就觉得强大，<code>recur</code>是一个非常底层的循环和递归控制操作，通常循环用<code>doseq</code>、<code>for</code>等循环控制，但是<code>recur</code>操作不消耗堆栈空间，操作数字性能很好，所以要适当的使用<code>recur</code><br>使用<code>recur</code>要有个<code>loop</code>头，好将程序转到<code>loop</code>头。<br><code>loop</code>隐式使用<code>let</code>，所以有个绑定数组。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">loop</span></span> [x <span class="number">5</span>]</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">neg?</span></span> x)</span><br><span class="line">    x</span><br><span class="line">    (<span class="name"><span class="builtin-name">recur</span></span> (<span class="name"><span class="builtin-name">dec</span></span> x))))</span><br><span class="line"><span class="comment">;=-1</span></span><br></pre></td></tr></table></figure></p>
<p> loop 头也可以是一个函数定义，那这样就是递归了， recur 会将所带的值绑定到函数的参数上去。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> d [x]</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">neg?</span></span> x)</span><br><span class="line">    x</span><br><span class="line">    (<span class="name"><span class="builtin-name">recur</span></span> (<span class="name"><span class="builtin-name">dec</span></span> x))))</span><br><span class="line">(<span class="name">d</span> <span class="number">4</span>)</span><br><span class="line"><span class="comment">;=-1</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="引用var-var"><a href="#引用var-var" class="headerlink" title="引用var:var"></a>引用var:var</h4><p>这个暂时没感觉什么太大的用处，先做个记录。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(def x 5)</span><br><span class="line">;=#'user/x</span><br><span class="line">x</span><br><span class="line">;=5</span><br><span class="line">(var x)</span><br><span class="line">;=#'user/x</span><br><span class="line">;reader的语法糖也可以求值成var这个特殊形式</span><br><span class="line">#'x</span><br><span class="line">;=#'user/x</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="和java的互操作-和new"><a href="#和java的互操作-和new" class="headerlink" title="和java的互操作:.和new"></a>和java的互操作:.和new</h4><p>尽量使用clojure的语法糖形式，特殊形式尽量不用。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;java代码</span><br><span class="line">"hello".substring(1, 3)</span><br><span class="line">Math.pow(2, 10)</span><br><span class="line">;clojure语法糖</span><br><span class="line">(.substring "hello" 1 3)</span><br><span class="line">(Math/pow 2 10)</span><br><span class="line">;特殊形式</span><br><span class="line">(. "hello" substring 1 3)</span><br><span class="line">(.Math pow 2 10)</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="异常处理-try和throw"><a href="#异常处理-try和throw" class="headerlink" title="异常处理:try和throw"></a>异常处理:try和throw</h4><p>后面讲</p>
<hr>
<h4 id="状态修改-set"><a href="#状态修改-set" class="headerlink" title="状态修改:set!"></a>状态修改:set!</h4><p>后面讲</p>
<hr>
<h4 id="锁的原语-monitor-enter和monitor-exit"><a href="#锁的原语-monitor-enter和monitor-exit" class="headerlink" title="锁的原语:monitor-enter和monitor-exit"></a>锁的原语:monitor-enter和monitor-exit</h4><p>后面讲</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Clojure 学习日记 — 2基础语法]]></title>
      <url>http://blog.caiyuyu.net/2016/01/26/2016-01-26-%5B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5DClojure%20%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%20%E2%80%94%202%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>唉，觉得有点啰嗦，废话太多，写着写着就变成了写博文，我是写笔记、写笔记。<br><a id="more"></a></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>跟java的字符串一样，不过天然支持多行。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hello there"</span></span><br><span class="line"><span class="comment">;="hello there"</span></span><br><span class="line"><span class="string">"multiline strings</span><br><span class="line">are very handy"</span></span><br><span class="line"><span class="comment">;="multiline strings\nare very handy"</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>类似java，true和false。<br>空值；这个有点不同，为nil，类似java的null，python的none。<br>字符；clojure看起来有点怪，没有用单引号包起来，不过跟java的字符差不多。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\c</span><br><span class="line">;=\c</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>类似概念，直接看例子。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> person &#123;<span class="symbol">:name</span> <span class="string">"Sandra Cruz"</span></span><br><span class="line">             <span class="symbol">:City</span> <span class="string">"Portland, ME"</span></span><br><span class="line">             :<span class="symbol">:lod</span> <span class="string">"Demo"</span>&#125;)</span><br><span class="line"><span class="comment">;=#'user/person</span></span><br><span class="line">(<span class="symbol">:city</span> person)</span><br><span class="line"><span class="comment">;="Portland, ME"</span></span><br></pre></td></tr></table></figure></p>
<p>关键字是要冒号开头的，双冒号开头表示所属当前命名空间，<br>如果双冒号开头又包含了/，表示所属特定命名空间，<br>这点有点懵，我估计是翻译的不好，我实际验证下。<br><code>:name</code> 表示只能在当前命名空间用<code>(:name person)</code>取到值。<br><code>::lod</code> 表示你可以在当前命名空间用<code>(::lod person)</code>取到值。<br>同时在所有命名空间，可以用<code>(:user/lod person)</code>取到值。</p>
<hr>
<h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><p> 十六进制：<code>0xff</code>表示255；<br> 八进制：<code>040</code>表示32；<br> 任意进制；<code>BrN</code>，N为数字，B为进制，<code>16rff</code>表示255，最高支持36进制。</p>
<hr>
<h3 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h3><p> clojure支持任意精度的数字。</p>
<hr>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p> clojure用以<code>#</code>开头的字符串当作正则表达式，在字符串中不需要加反斜杠转义。</p>
<hr>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>支持俩种注释，以分号<code>;</code>开头的单行注释还有以<code>#_</code>开头的形式级别的注释，可以直接注释一个形式。</p>
<hr>
<h3 id="空格和逗号"><a href="#空格和逗号" class="headerlink" title="空格和逗号"></a>空格和逗号</h3><p>空格和逗号基本上是等价的，一般用逗号在希望提高代码可读性的时候使用，比如<code>map</code>里面<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">create-user</span> &#123;<span class="symbol">:name</span> new-username, <span class="symbol">:email</span> email)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="集合字面量"><a href="#集合字面量" class="headerlink" title="集合字面量"></a>集合字面量</h3><p> 字面量这个看下来很高大上的词其实不是新概念，就相当于我们的数据形式，有四种。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">`(a b :name 12.5)      ;list</span><br><span class="line">['a 'b :name 12.5]     ;vector</span><br><span class="line">&#123;:name "Chas" :age 31&#125; ;map</span><br><span class="line">#&#123;1 2 3&#125;               ;set</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Clojure 学习日记 — 1入门]]></title>
      <url>http://blog.caiyuyu.net/2016/01/26/2016-01-26-%5B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5DClojure%20%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%20%E2%80%94%201%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>这个系列只是笔记，本非博文什么的，写给自己看，纯粹做个记录，里面的观点看法只是个人见解，仅作参考。</p>
<a id="more"></a>
<h3 id="学习教材"><a href="#学习教材" class="headerlink" title="学习教材"></a>学习教材</h3><p>嗯，废话不多说，教材用的是《Clojure Programming》，也就是俗称的动物书，听说比较全面，打基础不错。</p>
<p>当然，是翻译版的，英语水平不够是硬伤呀。 可以点 <a href="http://leanote.com/api/file/getAttach?fileId=56a72482ab6441777600233a" target="_blank" rel="external">Clojure Programming.pdf</a> 下载英文版PDF文档。</p>
<hr>
<h3 id="Clojure特点"><a href="#Clojure特点" class="headerlink" title="Clojure特点"></a>Clojure特点</h3><ol>
<li><p>基于JVM平台，lisp恶劣的生态圈和稳定的JVM一结合，赶脚是天造地设的一对。</p>
</li>
<li><p>函数式编程语言，不可否认，函数式编程确实可以锻炼你的思维。</p>
</li>
<li><p>天生适合进行并行、并发编程。</p>
</li>
<li><p>动态编程语言，可以交互式开发。</p>
</li>
</ol>
<hr>
<h3 id="Clojure的同像性"><a href="#Clojure的同像性" class="headerlink" title="Clojure的同像性"></a>Clojure的同像性</h3><p>同像性一般称为“代码即数据”，即是说clojure没有太多臃肿的代码片段，这也是元编程的前提。  </p>
<p>从代码转换成AST(抽象语法树)是一门语言的核心，也是体现一门语言的表达能力的所在，</p>
<p>但是你要作出这个转换一般的前提是你对这么语言有一定的理解，理解的程度和该门语言的表达能力成反比，但是具有同像性的语言是个例外，</p>
<p>因为clojure的代码是直接用AST的数据结构来写的，就是说，你写下的clojure代码就是一个AST了，不需要特意去转换，</p>
<p>这也意味着clojure拥有其他语言所不能及的优秀的表达能力。</p>
<hr>
<h3 id="Clojure跑起来"><a href="#Clojure跑起来" class="headerlink" title="Clojure跑起来"></a>Clojure跑起来</h3><h4 id="必备jar包"><a href="#必备jar包" class="headerlink" title="必备jar包"></a>必备jar包</h4><ol>
<li><p>JRE；也就是java运行时，当然，有JDK肯定也是可以的。</p>
</li>
<li><p>clojure.jar；可以在官网下载，现在最新的是1.8。</p>
</li>
</ol>
<h4 id="编程工具"><a href="#编程工具" class="headerlink" title="编程工具"></a>编程工具</h4><ol>
<li><p>Emacs；神器来着，可惜我驾驭不了，号称天生适合开发lisp，不适合新手，套用大牛的话，因为学习曲线太陡峭，除非你是emacs大牛。</p>
</li>
<li><p>Eclipse；没用过，用了一段时间的myeclipse，已弃用。</p>
</li>
<li><p>IDEA；没得说，强烈推荐，对clojure的支持很好，不过注意，不用La Clojure插件，用cursive插件，同时支持Leiningen，可惜要付费，不过真的很值，可以试用看看先。</p>
</li>
<li><p>命令行；这个不太熟悉，之前很久搞过，好像是要用lein运行的，不过用命令行，想想都觉得累，大牛走开、走开。</p>
</li>
</ol>
<hr>
<h3 id="REPL是什么鬼"><a href="#REPL是什么鬼" class="headerlink" title="REPL是什么鬼"></a>REPL是什么鬼</h3><h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><p>即 Read(读入)-Eval(求值)-Print(打印)-Loop(循环)。</p>
<p>其实很多语言都都有repl这个东东，就是俗称的解释器，解析代码用的，像java也有BeanShell。</p>
<p>但是clojure的repl是有点不同的，clojure的repl在解析代码的时候有个编译的过程，会编译成JVM的字节码，即是说clojure不是像html那种边解析边执行的，它是要编译成字节码后才能执行的，只不过clojure在解释执行的时候顺便编译了，跟直接执行一个clojure源文件是一样的，这点其实我也有点懵。</p>
<p>clojure有repl肯定是个不小的有点，因为这意味着clojure可以交互，可以在运行时更新现有或新的代码，类似phtyon，可以对比下java的web，更新代码都要重启服务器，如果是clojure来实现，就支持热部署。</p>
<h4 id="敲入代码"><a href="#敲入代码" class="headerlink" title="敲入代码"></a>敲入代码</h4><p>运行REPL，看到如下界面</p>
<p><code>user=&gt;</code></p>
<p>这个clojure是有命名空间的概念，user表示你当前的命名空间，user是默认命名空间。</p>
<p>我们定义一个函数average，可以传入一个数组求平均值。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> average    </span><br><span class="line">    [numbers]</span><br><span class="line">    (/ (<span class="name"><span class="builtin-name">apply</span></span> + numbers) (<span class="name"><span class="builtin-name">count</span></span> numbers)</span><br></pre></td></tr></table></figure></p>
<p>然后调用代码得到结果<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">average</span> [<span class="number">60</span> <span class="number">80</span> <span class="number">100</span> <span class="number">400</span>]</span><br><span class="line"><span class="comment">;=160</span></span><br></pre></td></tr></table></figure></p>
<p>注意 <code>;=</code>  前缀表示函数结果输出，在函数式语言中，函数是头等公民，都具有一个返回值，160就是average的返回值，也就是我们要求的平均值结果。</p>
<p>如果换成这样就变成这样<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">average</span> [<span class="number">60</span> <span class="number">80</span> <span class="number">100</span> <span class="number">499</span>]))</span><br><span class="line"><span class="comment">;160</span></span><br><span class="line"><span class="comment">;=nil</span></span><br></pre></td></tr></table></figure></p>
<p>先求值<code>average</code>得到160的结果，<code>println</code>函数打印结果为 ;160  </p>
<p>但是这个打印的功能只是附加的，每个函数都要求值才是repl本身就有的，<code>println</code> 求值为空，</p>
<p>即<code>nil</code> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Clojure 学习日记 — 0序言]]></title>
      <url>http://blog.caiyuyu.net/2016/01/20/2016-01-20-%5B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5DClojure%20%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%20%E2%80%94%200%E5%BA%8F%E8%A8%80/</url>
      <content type="html"><![CDATA[<p>吼吼吼，clojure你别跑，我来了，啦啦啦！</p>
<a id="more"></a>
<h3 id="lisp介绍"><a href="#lisp介绍" class="headerlink" title="lisp介绍"></a>lisp介绍</h3><p>说起clojure可能没多少人知道，可能最多只知道她是一种函数式语言、lisp方言，类似common lisp，  </p>
<p>lisp的设计思想是公认的强大，有人甚至说当今最高级的主流语言，也只是刚刚接近1958年出生的Lisp所在的水平，<br>而且之后发展的语言都有借鉴部分的lisp的思想，像java、python、ruby等。 </p>
<p>现在lisp作为一种小众语种，知道的人少，学习的人更少了，这其中的曲曲折折、坑坑洼洼我也不是很了解，<br>到底是什么原因导致一个如此牛掰的语言沦落至此？原因总结如下(我是没资格说这种话的，参考大牛)  </p>
<blockquote>
<ol>
<li>最最大的原因，生态圈有问题，因为她太太灵活了，你根本不可能制作出一款IDE来</li>
<li>lisp残缺不全，源码其实只写了一部分，但是就是这一部分包括宏定义这些就可以让常人仰望了</li>
<li>lisp是一种研究型、实验室语言，应用不广，无法推广。</li>
</ol>
</blockquote>
<p>在我大二的时候很迷恋lisp，看了一点语法，大概了解了lisp现状最后不得不不了了之，难是一部分原因，主要是你付出后得到的回报几乎微乎其微。<br>综合这些来看，其实现在有人学习lisp主要出于一种图腾崇拜思想去学习它，类似用emacs喝咖啡的感觉。  </p>
<hr>
<h3 id="clojure介绍"><a href="#clojure介绍" class="headerlink" title="clojure介绍"></a>clojure介绍</h3><p>虽然lisp现在发展几乎停滞，但是取lisp精华，去其糟粕的变种语言如Scheme、clojure却一直在前进。<br>2015暑假，在我大三的这一年我美丽地邂逅了clojure，又重新燃起我对lisp的喜爱，clojure有很多优点，我只说我比较看重的几点。  </p>
<blockquote>
<ol>
<li>基于jvm平台的lisp变种，弥补的lisp那可怕的生态圈又保持着lisp的灵活高效。  </li>
<li>可以被应用到企业上，据我所知clojure有一些优秀的web框架，如果学好clojure可能还能找的一个不错的工作。  </li>
<li>clojure+clojureScript几乎可以实现全栈，用一种语言实现全栈，想想该有多舒坦，而且还是这种简洁的语言。  </li>
<li>clojure的社区还是比较活跃的，在国内是有点冷淡，但是国外还是很热的，很多人在讨论她。</li>
</ol>
</blockquote>
<p>综上所述，clojure的这个坑我是掉定了，我也愿意！  </p>
<hr>
<h3 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h3><p>2015下半年断断续续的学了一点时间的clojure语法，但是只是囫囵吞枣，感觉什么都没学到，再加上学校课程也挺紧的，<br>索性推翻，重新学一遍，谨以本文做个记录，记录下心得，记录下我大clojure的成长之路。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IDEA 下的 maven+git 开发]]></title>
      <url>http://blog.caiyuyu.net/2016/01/20/2016-01-20-%5B%E6%8A%80%E6%9C%AF%E5%A4%87%E5%BF%98%5DIDEA%E4%B8%8B%E7%9A%84maven+git%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>不错不错，有了maven开发就简单多了，不会出现那么多莫名其妙的结构。<br><a id="more"></a></p>
<h3 id="为什么要用maven？"><a href="#为什么要用maven？" class="headerlink" title="为什么要用maven？"></a>为什么要用maven？</h3><p>maven是一个项目管理工具，基于Java平台，主要用于项目构建，依赖管理等。<br>可以说在企业开发中这个是必不可少的，这样说可能有些空泛，给你们列点实际点的。  </p>
<blockquote>
<p><code>1. 在进行ssh开发的导jar包的时候是不是很痛苦，经常会遇到jar包冲突的情况？</code><br><code>2. 团队开发还必须统一下开发环境，考虑用idea还是myeclipse，因为其不同的项目文件？</code><br><code>3. 团队开发是不是很纠结，共享代码要复制整个jar包库？</code>  </p>
</blockquote>
<p>嗯，是不是若有所思了呢？<br>那就好，接下来我们用maven来解决这些问题  </p>
<hr>
<h3 id="安装maven和配置环境变量"><a href="#安装maven和配置环境变量" class="headerlink" title="安装maven和配置环境变量"></a>安装maven和配置环境变量</h3><p>因为我的电脑并没有手动装maven，用的是myeclipse集成的maven，<br>大概看了下网上的教程，基本无脑安装，各位可以自行安装，<br>要注意的一点是如果需要用到命令行的就记得添加环境变量，<br>我是没有添加的，因为idea插件对maven支持的很好，不需要我们做什么命令行操作了。  </p>
<ul>
<li><a href="http://maven.apache.org/" target="_blank" rel="external">maven官网</a>  </li>
<li><a href="http://tutorialspoint.com/maven/" target="_blank" rel="external">maven教程网</a>  </li>
</ul>
<p>上面的maven官网就不用说什么了，在这里下载，至于这个教程网，介绍的比较详细，可以参考下  </p>
<p><img src="/img/pics/2016-01-20/maven.png" alt="down"></p>
<hr>
<h3 id="创建git项目"><a href="#创建git项目" class="headerlink" title="创建git项目"></a>创建git项目</h3><p>在这里我使用的是coding这个代码托管平台，在这里创建项目，其他的平台也可以，这个没什么区别  </p>
<p><img src="/img/pics/2016-01-20/maven2.png" alt="down">  </p>
<p><img src="/img/pics/2016-01-20/maven3.png" alt="down">  </p>
<p>复制下https的git访问链，等下要用到。  </p>
<hr>
<h3 id="在IDEA应用git项目"><a href="#在IDEA应用git项目" class="headerlink" title="在IDEA应用git项目"></a>在IDEA应用git项目</h3><h4 id="导入git项目"><a href="#导入git项目" class="headerlink" title="导入git项目"></a>导入git项目</h4><p><img src="/img/pics/2016-01-20/idea.png" alt="down">  </p>
<p><img src="/img/pics/2016-01-20/idea2.png" alt="down">  </p>
<p>将我们刚才复制的git链粘贴进去，然后ok，这个项目就是git项目了，你可以pull or push来进行更新。  </p>
<h4 id="添加-gitignore"><a href="#添加-gitignore" class="headerlink" title="添加.gitignore"></a>添加.gitignore</h4><p>如我们所知，idea的项目的根目录有个.idea的文件夹，myeclipse有.setting文件夹，<br>这些IDE的配置文件肯定不能上传到托管平台的，所以在.gitignore里面要加入  </p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Maven</span></span><br><span class="line">target/</span><br><span class="line">*.ser</span><br><span class="line">*.ec</span><br><span class="line"></span><br><span class="line"><span class="section"># IntelliJ Idea</span></span><br><span class="line">.idea/</span><br><span class="line">out/</span><br><span class="line">*.ipr</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line"></span><br><span class="line"><span class="section"># Eclipse</span></span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings/</span><br><span class="line">.metadata/</span><br></pre></td></tr></table></figure>
<p>这样这些配置文件就被git忽略掉了，记得，在idea中要确保.gitignore的颜色是绿色的，<br>才表示加入到git中未提交的，红色是没有加入，蓝色是修改过的，如下图右键点击文件可以加入。  </p>
<p><img src="/img/pics/2016-01-20/idea3.png" alt="down">  </p>
<h4 id="在IDEA中添加maven支持"><a href="#在IDEA中添加maven支持" class="headerlink" title="在IDEA中添加maven支持"></a>在IDEA中添加maven支持</h4><p>右键项目，有个<code>Add Framework support</code>，点击进去可以看到如下  </p>
<p><img src="/img/pics/2016-01-20/idea4.png" alt="down">  </p>
<p>选择maven后结束，这样就把这个项目变成maven项目了<br>可以看到项目多出了一个项目骨架及<code>pom.xml</code>文件<br>记得加入git中，这样生成的骨架是默认的，如果需要就在<code>pom.xml</code>中添加支持，自行创建文件夹  </p>
<p>这里我以添加ssh框架支持做个小例子  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.gank.sandCrossFingers&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;BackEndSystem&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;BackEndSystem Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;!--如果要使用jdk1.8，需要spring4搭配，否则版本有冲突--&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;source&gt;1.7&lt;/source&gt;</span><br><span class="line">          &lt;target&gt;1.7&lt;/target&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.1.2&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.6.1&lt;/version&gt;</span><br><span class="line">        &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2.16&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.6.1&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;struts2-spring-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;struts2-json-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.6.10.Final&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javassist&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.12.1.GA&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.25&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;6.0.33&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.9.3&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-core-asl&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.9.3&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-lang&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.6&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;velocity&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.7&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.8.3&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>修改完pom.xml文件后右上角可能是出现这个  </p>
<p><img src="/img/pics/2016-01-20/idea7.png" alt="down">  </p>
<p>点击后，每次修改<code>pom.xml</code>代码就会自动提交更新了，会自动根据<code>pom.xml</code>里面的配置下载jar包<br>在团队协作中，只要这个<code>pom.xml</code>文件一样，就可以保证你们的jar包完全一样，代码托管也不必上传一大堆jar包,<br>导入maven项目后就会自动根据<code>pom.xml</code>文件下载的  </p>
<p>点击右边边界的maven，可以弹出个窗口，可以查看maven的详细信息  </p>
<p><img src="/img/pics/2016-01-20/idea8.png" alt="down">  </p>
<p>如果要查看jar包冲突，可以点击这个去查看排除，有冲突会提示，只要<code>pom.xml</code>写得对一般没问题，这里就不多说了。  </p>
<p><img src="/img/pics/2016-01-20/idea9.png" alt="down">  </p>
<h4 id="添加webapp文件夹"><a href="#添加webapp文件夹" class="headerlink" title="添加webapp文件夹"></a>添加webapp文件夹</h4><p>前面已经说了，我们添加的骨架只是默认的，一般web的maven项目在<code>/src/main</code>下有个<code>webapp</code>目录，<br>里面存放<code>web.xml</code>等文件，没关系，我们可以自行创建文件夹，创建完<code>webapp</code>可以看到图标发生变化，<br>标明这是个web目录，如果没有变也没关系，可能是默认设置有误，我们可以去项目设置那里去设置，如下  </p>
<p><img src="/img/pics/2016-01-20/idea10.png" alt="down">  </p>
<p><img src="/img/pics/2016-01-20/idea11.png" alt="down">  </p>
<p><img src="/img/pics/2016-01-20/idea12.png" alt="down">  </p>
<blockquote>
<p><code>注意上下两个路径都要仔细看清楚，不要选错，这个很容易错！！！</code>  </p>
</blockquote>
<p>然后好了，基本上就是这样了，接下来就是ssh配置文件的添加，类似添加<code>web.xml</code>，然后添加服务器运行，完了。  </p>
<p>水平所限，欢迎指点交流，谢谢。  </p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.youmeek.com/intellij-idea-part-xviii-maven/" target="_blank" rel="external">Judas.n的教程</a><br><a href="http://blog.csdn.net/gol_phing/article/details/49331845" target="_blank" rel="external">Golphing的博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下 Emacs+Markdown 的使用]]></title>
      <url>http://blog.caiyuyu.net/2015/08/29/2015-08-27-%5B%E6%8A%80%E6%9C%AF%E5%A4%87%E5%BF%98%5DWindows%E4%B8%8BEmacs+Markdown%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>emacs竟然不能预览markdown，不可能，还有什么是没万能的emacs做不到的？<br><a id="more"></a></p>
<h3 id="解决什么问题？"><a href="#解决什么问题？" class="headerlink" title="解决什么问题？"></a>解决什么问题？</h3><p>简单的来说，本文解决的是你在emacs下使用 <code>C+c C+c p</code> 指令预览markdown文件发生的错误，类似如下。</p>
<blockquote>
<p>‘markdown’不是内部或外部指令，也不是可运行的程序或批处理文件。</p>
</blockquote>
<p>如果是这个问题的话，恭喜你，继续往下看。</p>
<p>一般来说，我们使用markdown会输出成html格式才可以使用。除非网站可以解析md文件，比如说github，那就可以省了这个步骤。<br>所以我们要预览就肯定要导出一个html文件，而md文件转成html文件是要添加外部依赖的，这就是问题的根源。</p>
<p>这里我用了两种方法来解决。</p>
<ul>
<li>使用python的Markdown包</li>
<li>使用pandoc工具</li>
</ul>
<h3 id="使用python的markdown包"><a href="#使用python的markdown包" class="headerlink" title="使用python的markdown包"></a>使用python的markdown包</h3><p>####搭建python环境<br>下载python (<a href="https://www.python.org" target="_blank" rel="external">https://www.python.org</a>)<br>然后安装，这个简单，就不用我说了，无脑操作。</p>
<p>####下载Markdown包并安装<br>打开<code>cmd</code>，输入如下，会自行下载安装，python的环境变量如果没有设置要先设置好。</p>
<blockquote>
<p>pip install markdown</p>
</blockquote>
<p><img src="/img/pics/2015-08-29/downMarkdown.png" alt="down"></p>
<p>安装好它会提示你安装的位置，进入该目录的包文件，你会看到有个<code>setup.py</code>文件，这个是python脚本的安装文件，<br>打开<code>cmd</code>，cd到该位置，输入指令</p>
<blockquote>
<p>python setup.py install</p>
</blockquote>
<p><img src="/img/pics/2015-08-29/installMarkdown.png" alt="install"></p>
<p>又是一大堆信息出来，个人觉得python这点很好，可以让我们很清楚的知道产生了那些文件。<br>我们可以看到在<code>Scripts</code>文件夹下产生了一个名为<code>markdown_py</code>的批处理文件。</p>
<p>####修改markdown-mode.el<br>我们生成的批处理文件名是<code>markdown_py</code>，但是<code>markdown-mode.el</code>里面默认的指令名是<code>markdown</code>,所以需要修改下。</p>
<p>打开<code>markdown-mode.el</code>文件，在800多行左右可以看到如下</p>
<p><img src="/img/pics/2015-08-29/el.png" alt="el"></p>
<p>将<code>markdown</code>改成<code>markdown_py</code></p>
<p><img src="/img/pics/2015-08-29/el2.png" alt="el2"></p>
<p>再打开emacs，切换到<code>markdown-mode</code>，随便输点东西，<code>C-c C-c p</code>一下，运行如下。</p>
<p><img src="/img/pics/2015-08-29/t.png" alt="t"></p>
<p>成功运行，没有报出指令错误，但是我们可以发现浏览器中文乱码。</p>
<p>这个简单，因为md文件最终也是要转成html的，我们可以在在每个md文件开头加上一句</p>
<blockquote>
<p><code>&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</code></p>
</blockquote>
<p><img src="/img/pics/2015-08-29/t2.png" alt="t2"></p>
<p>不过确实，在md文件加上这一句确实不太美观，所以我推荐第二种方法，更好更强大。</p>
<p>###使用pandoc工具</p>
<p>####下载pandoc并安装<br>下载pandoc (<a href="http://www.pandoc.org" target="_blank" rel="external">http://www.pandoc.org</a>)，选择windows版本，然后安装。</p>
<p>pandoc可以解析markdown文件，但是它并不仅仅支持markdown的标记语法，还支持语法高亮和LaTex数学公式，可以把它当作markdown的拓展。</p>
<p>以下是官网介绍，可以简单看一下。</p>
<p><img src="/img/pics/2015-08-29/pandoc.png" alt="pandoc"></p>
<p>####修改markdown-mode.el<br>安装完pandoc后，环境变量会多出一个<code>pandoc</code>的指令，</p>
<p>打开<code>markdown-mode.el</code>，还是刚才那个位置</p>
<p><img src="/img/pics/2015-08-29/el.png" alt=""></p>
<p><code>pandoc</code>的命令选项如下</p>
<p>||选项||描述|||<br>||<code>-f html</code>||转换成html文件||<br>||<code>-t markdown</code>||解析markdown||<br>||<code>--ascii</code>||解决中文乱码||<br>||<code>--highlight-style pygments</code>||支持语法高亮||<br>||<code>--mathjax</code>||支持 LaTex数学公式||</p>
<p>一股脑都加进去吧，将<code>markdown</code>修改为如下</p>
<blockquote>
<p><code>pandoc -f markdown -t html --ascii --highlight-style pygments --mathjax</code></p>
</blockquote>
<p><img src="/img/pics/2015-08-29/well.png" alt="well"></p>
<p>水平所限，欢迎指点交流，谢谢。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://panqiincs.github.io/" target="_blank" rel="external">辛未羊的博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下 TortoiseGit+Coding 的使用]]></title>
      <url>http://blog.caiyuyu.net/2015/07/15/2015-07-15-%5B%E6%8A%80%E6%9C%AF%E5%A4%87%E5%BF%98%5DWindows%E4%B8%8BTortoiseGit+Coding%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>git可是个好东西，版本控制嘛，不满意回滚呗，有异议开分支呗。</p>
<a id="more"></a>
<h3 id="为什么要用Git"><a href="#为什么要用Git" class="headerlink" title="为什么要用Git"></a>为什么要用Git</h3><p>简单来说，Git就是一个版本控制系统，它可以保存我们对代码的每次修改，也可以创建多个分支，必要时可以返回修改。</p>
<p>那么Git比我们熟知的svn又有哪些优点呢？经验所限，我只能大概说出几点。</p>
<p><code>1.Git会在自己电脑本地创建一个本地仓库</code><br>为什么说这一点好呢？和svn不同的是，git因为本机带有一个本地仓库，所有修改操作都要先提交到本机，然后再推送出去。<br>这也意味着git可以缓存多个版本，而svn只能缓存一个，所以git相当于svn的客户端+svn的服务器端。<br>咋一看没什么实际的用处，假设你现在现在不能联网，与团队的其他人数据无法交互，同时这段时间你又对代码做了很大的修改，这也意味着git可以保存<br>每一模块修改的版本，如果需要恢复会很方便，如果是svn，只能返回到你大量修改前，相当于你做了大量的无用功。</p>
<p><code>2.Git支持的代码托管平台比较多</code><br>好像开源中国的Git@OSC支持svn，这点不确定，没用过，这也从侧面反映了svn的托管平台确实少。<br>git的就多了,基本上有名的托管平台都是支持的。<br>像大名鼎鼎的<code>gitHub</code>,支持无限的公有项目和私有项目<code>gitlab</code>,还有国内速度极快的<code>coding</code>等等，这个很多，有兴趣可以自己找下。</p>
<p>据说git可是Linus用C耗费两周写出来的，各种狂霸酷炫拽有木有，<br>具体教程可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的教程</a>，写得很不错。</p>
<h3 id="下载及安装所需工具"><a href="#下载及安装所需工具" class="headerlink" title="下载及安装所需工具"></a>下载及安装所需工具</h3><h4 id="下载git-for-windows"><a href="#下载git-for-windows" class="headerlink" title="下载git for windows"></a>下载<a href="http://git-scm.com/download/" target="_blank" rel="external">git for windows</a></h4><p>进入git的官网,选择windows版本下载，</p>
<p><img src="/img/pics/2015-07-15/gitdown.png" alt="git"></p>
<p><img src="/img/pics/2015-07-15/gitDown2.png" alt="git"></p>
<h4 id="下载TortoiseGit"><a href="#下载TortoiseGit" class="headerlink" title="下载TortoiseGit"></a>下载<a href="http://git-scm.com/download/" target="_blank" rel="external">TortoiseGit</a></h4><p>习惯把Tortoise叫小乌龟，Tortoise也有svn版的，是Windows下的可视化界面。<br>选择最新的当前版本，现在最新的是1.8.14.0，然后选择 32bit/64bit下载。</p>
<p><img src="/img/pics/2015-07-15/TortoiseGit.png" alt="tortoiseGit"></p>
<p><img src="/img/pics/2015-07-15/TortoiseGit2.png" alt="tortoiseGit"></p>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>把第一、三、四个一级复选框都勾上，因为我们用小乌龟做图形界面，所以不需要安装git gui<br><img src="/img/pics/2015-07-15/installGit.png" alt="installGit"></p>
<p> 下面选择use git from the windows command prompt<br> 选择这个会将git配置到path里面<br><img src="/img/pics/2015-07-15/installGit2.png" alt="installGit"></p>
<p>这个是选择回车换行的格式，默认第一个即可，检出时转换为Windows风格,提交时转换为Linux风格<br><img src="/img/pics/2015-07-15/installGit3.png" alt="installGit"></p>
<p>接下来应该没什么问题了，结束。</p>
<h4 id="安装TortoiseGit"><a href="#安装TortoiseGit" class="headerlink" title="安装TortoiseGit"></a>安装TortoiseGit</h4><p>小乌龟安装更简单了，默认，直接下一步，结束。</p>
<p><img src="/img/pics/2015-07-15/installTortoise.png" alt="tortoiseGit"></p>
<p><img src="/img/pics/2015-07-15/installTortoise2.png" alt="tortoiseGit"></p>
<h3 id="注册coding-net账号"><a href="#注册coding-net账号" class="headerlink" title="注册coding.net账号"></a>注册coding.net账号</h3><p>由于我们选择在coding创建远程仓库，所以注册一个<a href="https://coding.net" target="_blank" rel="external">coding.net</a>的账号是必须滴。</p>
<p><img src="/img/pics/2015-07-15/coding.png" alt="coding"></p>
<p>需要一个邮箱和独一存在的用户名，或者说是个性后缀，都可以。<br>由于我已经注册过，下面的邮箱和用户名显示已存在，这个没什么可说的，自己注册个。</p>
<p><img src="/img/pics/2015-07-15/coding2.png" alt="coding"></p>
<h3 id="创建本地仓库并配置"><a href="#创建本地仓库并配置" class="headerlink" title="创建本地仓库并配置"></a>创建本地仓库并配置</h3><h4 id="创建本地仓库文件夹"><a href="#创建本地仓库文件夹" class="headerlink" title="创建本地仓库文件夹"></a>创建本地仓库文件夹</h4><p>在你对应的工作空间创建一个空的文件夹<code>test_demo</code><br>右键<code>test_demo</code>文件夹，选择Git Create repository here。<br>第一次会弹出git init的对话框，不要勾选make it bare，ok。<br>这样就选择这个文件夹作为你的本地仓库，这个文件夹也是你的项目。每次修改代码会先提交到这个地方，然后再从这里推送到远程仓库。</p>
<h4 id="配置git日志标识"><a href="#配置git日志标识" class="headerlink" title="配置git日志标识"></a>配置git日志标识</h4><p>右键<code>test_demo</code>文件夹，在<code>TortoiseGit</code>一栏选择setting，在弹出的窗口点击左边的git节点，<br>填入name和email，这个只是作为你的这个项目的本地机器的日志标识，关系并不大，可以随便填。</p>
<p><img src="/img/pics/2015-07-15/setGit.png" alt="setting"></p>
<h4 id="配置访问方式"><a href="#配置访问方式" class="headerlink" title="配置访问方式"></a>配置访问方式</h4><p>假如在远程仓库上，你创建了一个项目，<br>一般有三种访问方式<br>1) HTTPS：读写仓库加密通道，有单次上传限制。<br>2) SSH：读写仓库加密通道，无单次上传限制，需先在设置公钥，完成配对验证。<br>3) Git：只读，并且只对公开项目有效。</p>
<blockquote>
<p><code>如果要使用ssh方式访问</code><br>ssh方式是一种加密的访问方式，使用这种方式我们需要在本机机器生成一串公钥，然后在托管平台上进行绑定授权。<br>我们安装小乌龟会附带安装一些组件，找到<code>Puttygen</code>这个程序打开，点击Generate按钮，接着你会发现随着你鼠标在<code>Puttygen</code>窗口滑动，进度条会滚动并最终生成一串公钥<br><img src="/img/pics/2015-07-15/setGit2.png" alt="setting"><br><code>ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIB+gadTNAA3iID1l5rg0qEhn5YySxANkYS6pQykbvdq8p
V70dIFrsN2QCxoVz7W0NZydgFSAwGc4TYWKCSJUKVqgg+2Sf2mFc5LwaHwOX+NilA6SwH2NEOd1lUmr
MgV7HJ8f4OhL4Ivwoqw/ZRPfBURfuHpVSXol5T4XuqMS00G0w== rsa-key-20150715</code><br>上面这一串就是了，copy下。<br>接着点击 <code>save private key</code> 把私钥保存在本地，注意！你的公钥对应的私钥必须要妥善保存，如果丢失跟密码被盗一样严重。记住路径和文件名，等下要用到。</p>
</blockquote>
<p>打开<code>coding.net</code>,当然肯定要登陆了，然后创建一个新项目，中文界面滴，看不懂找你小学语文老师。</p>
<p><img src="/img/pics/2015-07-15/import.png" alt="init"></p>
<p>在这里我选了启用readme.md来初始化，这个没什么关系，一个介绍页面而已，不过写这个东东还是挺有趣的，一种新的语法应用。</p>
<p><img src="/img/pics/2015-07-15/import2.png" alt="init"></p>
<p>可以看到，默认创建了一个master分支，然后我——Tornado作为项目创建者也默认添加进了项目成员里面，<code>如果是团队协作，需要先把人邀请到这个项目，他们才能访问</code>。</p>
<blockquote>
<p><code>如果是ssh方式访问</code><br>在个人账户信息配置ssh公钥，把刚才copy的粘贴上去，名称随便填，不过最好稍微标记下是哪台电脑。<br><img src="/img/pics/2015-07-15/t.png" alt="init"><br><img src="/img/pics/2015-07-15/t2.png" alt="init"></p>
</blockquote>
<p>打开<code>coding.net</code>,点击<code>代码</code>选项卡，可以看到这个。</p>
<p><img src="/img/pics/2015-07-15/v.png" alt="init"></p>
<p>左下角那个选择ssh或者https方式访问，copy下那串链接。</p>
<p>打开项目的<code>setting</code>，选择git节点下的remote。</p>
<p><img src="/img/pics/2015-07-15/v2.png" alt="init"></p>
<p>在url那栏把刚才copy的访问链接粘贴下去，<code>putty key</code>，ssh访问需要导入私钥路径，https则不需要，<code>remote</code>标记这个这条访问链，随便填。填好后点击<code>Add new / save</code>。<br>ok后接着下一步，出现下面这个。</p>
<p>成功了，就会提示<code>Success</code>，不成功的话就检查下信息是否有误或者前面哪个操作出现问题，再试一次。</p>
<h3 id="初始化项目及推送项目"><a href="#初始化项目及推送项目" class="headerlink" title="初始化项目及推送项目"></a>初始化项目及推送项目</h3><p>这样配置的东西都搞定了，不过由于我们本地仓库是空的，需要从远程仓库<code>pull</code>下来初始化一下。<br>右键<code>test_demo</code>文件夹，在<code>TortoiseGit</code>里面选择<code>pull</code>，<code>Success</code>后可以看到项目里面多了个<code>readme.md</code>文件。</p>
<p>接下来在项目里面随便建立一个<code>test.php</code>文件，刚建立可以看到图标是一个问号，表明还没加入到本地仓库。右键这个文件，在<code>TortoiseGit</code>里面选择<code>add</code>，会弹出一个对话框，我们直接提交到本地仓库，点击<code>commit</code>按钮</p>
<p><img src="/img/pics/2015-07-15/c.png" alt="init"></p>
<p>会弹出一个确定操作的窗口，可以看到你对什么文件进行提交，我们勾选<code>test.php</code>文件，在<code>message</code>修改操作信息，这个是必填的。</p>
<blockquote>
<p><code>如果是https方式访问</code><br><img src="/img/pics/2015-07-15/v3.png" alt="init"><br>推送的时候会弹出这个，提示要输入用户名和密码，每次推送都需要输一次，像我这么懒的人就受不了了。<br>我们可以点击<code>setting</code>下git节点下的<code>Edit local.git/config</code>按钮，在弹出的<br>Notepad文本的最后输入。<br><code>[credential]
helper = store</code><br>这样就只要输入一次就会自动保存，不过需要注意的是这种方式会在本地以明文形式保存信息，具体信息可以自行拓展。</p>
</blockquote>
<p>当看到<code>test.php</code>文件图标变成绿色对勾时，就证明提交成功了。</p>
<p>接着往coding.net推送，我们可以选择整个项目，也可以选择单个文件推送，<br>右键<code>test_demo</code>，在<code>TortoiseGit</code>里面选择<code>push</code>，没什么意外都是直接ok。<br><code>success</code>后打开<code>coding.net</code>看下动态，可以看到最新的推送信息。至此完成。</p>
<p><img src="/img/pics/2015-07-15/c2.png" alt="init"></p>
<h3 id="想说的话"><a href="#想说的话" class="headerlink" title="想说的话"></a>想说的话</h3><p>首先非常感谢各位耐心的看到了最后，第一次写博文，可能会存在很多不足，希望各位路过的大牛不吝赐教，如果对于文章有什么疑惑或者建议的，也希望你们在下面的多玩评论里面留下你们的脚印，谢谢。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/ethan_xue/article/details/7749639" target="_blank" rel="external">ethan_xue</a><br><a href="http://www.cnblogs.com/Bonker/p/3441781.html" target="_blank" rel="external">Bonker</a><br><a href="http://blog.csdn.net/renfufei/article/details/41647875" target="_blank" rel="external">铁锚</a></p>
]]></content>
    </entry>
    
  
  
</search>
